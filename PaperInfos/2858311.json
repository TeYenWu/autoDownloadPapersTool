{"paperId":2858311,"citation":[],"reference":[{"content":"Christopher Amavisca, JR Boyens, Gregg Van Hove, and Vinson Chuong. 2015. Jasmine. http://jasmine.github.io/. (2015). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"Shay Artzi, Julian Dolby, Simon Holm Jensen, Anders Møller, and Frank Tip. 2011. A Framework for Automated Testing of Javascript Web Applications. In Proceedings of the 33rd International Conference on Software Engineering (ICSE '11). ACM, New York, NY, USA, 571--580. DOI: http://dx.doi.org/10.1145/1985793.1985871","paperID":"None"},{"content":"D Asenov and P Muller. 2014. Envision: A fast and --exible visual code editor with --uid interactions (Overview). 2014 IEEE Symposium on Visual Languages and Human-Centric Computing (VL/HCC) (2014), 9--12. DOI: http://dx.doi.org/10.1109/VLHCC.2014.6883014","paperID":"None"},{"content":"Joel Brandt, Philip J Guo, Joel Lewenstein, Mira Dontcheva, and Scott R Klemmer. 2009. Opportunistic Programming: Writing Code to Prototype, Ideate, and Discover. IEEE Software 26, 5 (Sept. 2009), 18--24.","paperID":"None"},{"content":"Brian Burg, Richard Bailey, Andrew J. Ko, and Michael D. Ernst. 2013. Interactive Record/Replay for Web Application Debugging. In Proceedings of the 26th Annual ACM Symposium on User Interface Software and Technology (UIST '13). ACM, New York, NY, USA, 473--484. DOI: http://dx.doi.org/10.1145/2501988.2502050","paperID":"None"},{"content":"Raymond P.L. Buse and Westley R. Weimer. 2008. Automatic Documentation Inference for Exceptions. In Proceedings of the 2008 International Symposium on Software Testing and Analysis (ISSTA '08). ACM, New York, NY, USA, 273--282. DOI: http://dx.doi.org/10.1145/1390630.1390664","paperID":"None"},{"content":"Raymond P.L. Buse and Westley R. Weimer. 2010. Automatically Documenting Program Changes. In Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE '10). ACM, New York, NY, USA, 33--42. DOI: http://dx.doi.org/10.1145/1858996.1859005","paperID":"None"},{"content":"The contributors to the JSDoc 3 documentation project. 2011. @use JSDoc. http://usejsdoc.org/. (2011). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"B de Alwis, G C Murphy, and M P Robillard. 2007. A Comparative Study of Three Program Exploration Tools. In 15th IEEE International Conference on Program Comprehension (ICPC '07). 103--112. DOI: http://dx.doi.org/10.1109/ICPC.2007.6","paperID":"None"},{"content":"Michael D Ernst, Jeff H Perkins, Philip J Guo, Stephen McCamant, Carlos Pacheco, Matthew S Tschantz, and Chen Xiao. 2007. The Daikon system for dynamic detection of likely invariants. Science of Computer Programming 69, 1--3 (Dec. 2007), 35--45.","paperID":"None"},{"content":"Victor M. Gonzalez and Gloria Mark. 2004. \"Constant, Constant, Multi-tasking Craziness\": Managing Multiple Working Spheres. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI '04). ACM, New York, NY, USA, 113--120. DOI: http://dx.doi.org/10.1145/985692.985707","paperID":"None"},{"content":"Marijn Haverbeke. 2015. Tern. http://ternjs.net/. (2015). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"Adobe Inc. 2015a. Brackets. http://brackets.io/. (2015). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"Facebook Inc. 2015b. Flow. http://flowtype.org/. (2015). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"StrongLoop Inc. 2015c. Express. http://expressjs.com/. (2015). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"Mira Kajko-Mattsson. 2001. The state of documentation practice within corrective maintenance. IEEE International Conference on Software Maintenance. ICSM 2001 (2001), 354--363.","paperID":"None"},{"content":"Andrew J. Ko and Brad A. Myers. 2006. Barista: An Implementation Framework for Enabling New Tools, Interaction Techniques and Views in Code Editors. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI '06). ACM, New York, NY, USA, 387--396. DOI: http://dx.doi.org/10.1145/1124772.1124831","paperID":"None"},{"content":"Andrew J. Ko and Brad A. Myers. 2009. Finding Causes of Program Output with the Java Whyline. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI '09). ACM, New York, NY, USA, 1569--1578. DOI: http://dx.doi.org/10.1145/1518701.1518942","paperID":"None"},{"content":"Jeffrey Kotula. 2000. Source code documentation: an engineering deliverable. Technology of Object-Oriented Languages (2000).","paperID":"None"},{"content":"Ole Kroger. 2015. FuncDocr. https://github.com/wikunia/brackets-funcdocr. (2015). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"Tom Lieber, Joel R. Brandt, and Rob C. Miller. 2014. Addressing Misconceptions About Code with Always-on Programming Visualizations. In Proceedings of the SIGCHI Conference on Human Factors in Computing Systems (CHI '14). ACM, New York, NY, USA, 2481--2490. DOI: http://dx.doi.org/10.1145/2556288.2557409","paperID":"None"},{"content":"Ali Mesbah and Arie Van Deursen. 2009. Invariant-based automatic testing of AJAX user interfaces. IEEE 31st International Conference on Software Engineering (May 2009), 210--220. DOI: http://dx.doi.org/10.1109/ICSE.2009.5070522","paperID":"None"},{"content":"Microsoft. 2015. TypeScript. http://www.typescriptlang.org/. (2015). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"Matthew Mueller. 2015. Cheerio. http://cheeriojs.github.io/cheerio/. (2015). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"Linda Dailey Paulson. 2007. Developers shift to dynamic programming languages. Computer 40, 2 (Jan. 2007), 12--15. DOI: http://dx.doi.org/10.1109/MC.2007.53","paperID":"None"},{"content":"Gregor Richards, Sylvain Lebresne, Brian Burg, and Jan Vitek. 2010. An Analysis of the Dynamic Behavior of JavaScript Programs. SIGPLAN Not. 45, 6 (June 2010), 1--12. DOI: http://dx.doi.org/10.1145/1809028.1806598","paperID":"None"},{"content":"Karen J. Rothermel, Curtis R. Cook, Margaret M. Burnett, Justin Schonfeld, T. R. G. Green, and Gregg Rothermel. 2000. WYSIWYT Testing in the Spreadsheet Paradigm: An Empirical Evaluation. In Proceedings of the 22Nd International Conference on Software Engineering (ICSE '00). ACM, New York, NY, USA, 230--239. DOI: http://dx.doi.org/10.1145/337180.337206","paperID":"None"},{"content":"Giriprasad Sridhara, Emily Hill, Divya Muppaneni, Lori Pollock, and K. Vijay-Shanker. 2010. Towards Automatically Generating Summary Comments for Java Methods. In Proceedings of the IEEE/ACM International Conference on Automated Software Engineering (ASE '10). ACM, New York, NY, USA, 43--52. DOI: http://dx.doi.org/10.1145/1858996.1859006","paperID":"None"},{"content":"Benjamin Tan, John-David Dalton, Kit Cambridge, Mathias Bynens, and Blaine Bublitz. 2015. lodash. https://lodash.com/. (2015). [Online; accessed 17-September-2015].","paperID":"None"},{"content":"M J Taylor, J McWilliam, H Forsyth, and S Wade. 2002. Methodologies and website development: a survey of practice. Information and Software Technology 44, 6 (April 2002), 381--391.","paperID":"None"},{"content":"S Tilkov and S Vinoski. 2010. Node.js: Using JavaScript to build high-performance network programs. IEEE Internet Computing 14, 6 (2010), 80--83. DOI: http://dx.doi.org/10.1109/MIC.2010.145","paperID":"None"},{"content":"Tao Xie and David Notkin. 2006. Tool-assisted unit-test generation and selection based on operational abstractions. Automated Software Engineering 13, 3 (2006), 345--371. DOI: http://dx.doi.org/10.1007/s10851-006--8530--6","paperID":"None"}],"abstract":"Documentation and unit tests increase software maintainability, but real world software projects rarely have adequate coverage. We hypothesize that, in part, this is because existing authoring tools require developers to adjust their workflows significantly. To study whether improved interaction design could affect unit testing and documentation practice, we created an authoring support tool called Vesta. The main insight guiding Vesta's interaction design is that developers frequently manually test the software they are building. We propose leveraging runtime information from these manual executions. Because developers naturally exercise the part of the code on which they are currently working, this information will be highly relevant to appropriate documentation and testing tasks. In a complex coding task, nearly all documentation created using Vesta was accurate, compared to only 60% of documentation created without Vesta, and Vesta was able to generate significant portions of all tests, even those written manually by developers without Vesta.","title":"Using Runtime Traces to Improve Documentation and Unit Test Authoring for Dynamic Languages","filename":"CHI16/p3232","authors":["Jan-Peter Krämer","Joel Brandt","Jan Borchers"],"conference":"CHI '16"}